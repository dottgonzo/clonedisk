var Promise = require("bluebird");
var child_process = require("child_process");
var lsDisks = require("ls-disks");
var exec = child_process.exec;
var spawn = child_process.spawn;
function shacheck(path, bs, count) {
    return new Promise(function (resolve, reject) {
        if (bs && count) {
            exec("dd if=" + path + " bs=" + bs + " count=" + count + " | sha1sum ", function (err, stdout, stderr) {
                resolve(stdout);
            });
        }
        else {
            exec("sha1sum " + path, function (err, stdout, stderr) {
                resolve(stdout);
            });
        }
    });
}
function clone(source, dest) {
    return new Promise(function (resolve, reject) {
        var disk = false;
        if (source.split("dev/") == 2) {
            disk = source;
        }
        else if (dest.split("dev/") == 2) {
            disk = dest;
        }
        if (disk) {
            exec("fdisk -l | grep '" + disk + "' -A 2 ", function (err, stdout, stdin) {
                var fdiskstring = stdout.toString("utf-8");
                var fdisklines = fdiskstring.split("\n");
                var bs = fdisklines[2].replace(/ +(?= )/g, "").split(" ")[0];
                var count = fdisklines[2].replace(/ +(?= )/g, "").split(" ")[0];
                var cmd = "dd if=" + source + " bs=" + bs + " count=" + count + " of=" + dest;
                console.log(cmd);
                shacheck(source, bs, count).then(function (sha1) {
                    exec(cmd, function (err, stdout, stderr) {
                        shacheck(dest, bs, count).then(function (sha2) {
                            if (sha1 == sha2) {
                                resolve(true);
                            }
                            else {
                                reject("sha don't match");
                            }
                        });
                    });
                });
            });
        }
        else {
            var cmd = "dd if=" + source + " of=" + dest;
            console.log(cmd);
            shacheck(source).then(function (sha1) {
                exec(cmd, function (err, stdout, stderr) {
                    shacheck(dest).then(function (sha2) {
                        if (sha1 == sha2) {
                            resolve(true);
                        }
                        else {
                            reject("sha don't match");
                        }
                    });
                });
            });
        }
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pbmRleC50cyJdLCJuYW1lcyI6WyJzaGFjaGVjayIsImNsb25lIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFZLE9BQU8sV0FBTSxVQUFVLENBQUMsQ0FBQTtBQUNwQyxJQUFZLGFBQWEsV0FBTSxlQUFlLENBQUMsQ0FBQTtBQUUvQyxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFbEMsSUFBSSxJQUFJLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQztBQUM5QixJQUFJLEtBQUssR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDO0FBRWhDLGtCQUFrQixJQUFZLEVBQUUsRUFBVyxFQUFFLEtBQWM7SUFDdkRBLE1BQU1BLENBQUNBLElBQUlBLE9BQU9BLENBQUNBLFVBQVNBLE9BQU9BLEVBQUVBLE1BQU1BO1FBRS9DLEVBQUUsQ0FBQSxDQUFDLEVBQUUsSUFBRSxLQUFLLENBQUMsQ0FBQSxDQUFDO1lBQ0YsSUFBSSxDQUFDLFFBQVEsR0FBQyxJQUFJLEdBQUUsTUFBTSxHQUFHLEVBQUUsR0FBRyxTQUFTLEdBQUcsS0FBSyxHQUFHLGFBQWEsRUFBRSxVQUFTLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTTtnQkFDakcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBQ1gsQ0FBQztRQUFBLElBQUksQ0FBQSxDQUFDO1lBQ00sSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLEVBQUUsVUFBUyxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU07Z0JBQ3BELE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwQixDQUFDLENBQUMsQ0FBQztRQUNYLENBQUM7SUFNRyxDQUFDLENBQUNBLENBQUNBO0FBQ1BBLENBQUNBO0FBRUQsZUFBZSxNQUFNLEVBQUUsSUFBSTtJQUN2QkMsTUFBTUEsQ0FBQ0EsSUFBSUEsT0FBT0EsQ0FBQ0EsVUFBU0EsT0FBT0EsRUFBRUEsTUFBTUE7UUFJdkMsSUFBSSxJQUFJLEdBQUcsS0FB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WUFDUCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUM7SUFFTCxDQUFDLENBQUNBLENBQUNBO0FBSVBBLENBQUNBIiwiZmlsZSI6ImxpYi9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFByb21pc2UgZnJvbSBcImJsdWViaXJkXCI7XG5pbXBvcnQgKiBhcyBjaGlsZF9wcm9jZXNzIGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XG5cbmxldCBsc0Rpc2tzID0gcmVxdWlyZShcImxzLWRpc2tzXCIpO1xuXG5sZXQgZXhlYyA9IGNoaWxkX3Byb2Nlc3MuZXhlYztcbmxldCBzcGF3biA9IGNoaWxkX3Byb2Nlc3Muc3Bhd247XG5cbmZ1bmN0aW9uIHNoYWNoZWNrKHBhdGg6IHN0cmluZywgYnM/OiBzdHJpbmcsIGNvdW50Pzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG5pZihicyYmY291bnQpe1xuICAgICAgICAgICAgZXhlYyhcImRkIGlmPVwiK3BhdGgrIFwiIGJzPVwiICsgYnMgKyBcIiBjb3VudD1cIiArIGNvdW50ICsgXCIgfCBzaGExc3VtIFwiLCBmdW5jdGlvbihlcnIsIHN0ZG91dCwgc3RkZXJyKSB7XG4gICAgICAgICAgICByZXNvbHZlKHN0ZG91dCk7XG4gICAgICAgIH0pO1xufWVsc2V7XG4gICAgICAgICAgICBleGVjKFwic2hhMXN1bSBcIiArIHBhdGgsIGZ1bmN0aW9uKGVyciwgc3Rkb3V0LCBzdGRlcnIpIHtcbiAgICAgICAgICAgIHJlc29sdmUoc3Rkb3V0KTtcbiAgICAgICAgfSk7XG59XG5cblxuXG5cblxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjbG9uZShzb3VyY2UsIGRlc3QpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cblxuXG4gICAgICAgIGxldCBkaXNrID0gZmFsc2U7XG5cblxuICAgICAgICBpZiAoc291cmNlLnNwbGl0KFwiZGV2L1wiKSA9PSAyKSB7XG5cbiAgICAgICAgICAgIGRpc2sgPSBzb3VyY2U7XG5cbiAgICAgICAgfSBlbHNlIGlmIChkZXN0LnNwbGl0KFwiZGV2L1wiKSA9PSAyKSB7XG4gICAgICAgICAgICBkaXNrID0gZGVzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXNrKSB7XG5cbiAgICAgICAgICAgIGV4ZWMoXCJmZGlzayAtbCB8IGdyZXAgJ1wiICsgZGlzayArIFwiJyAtQSAyIFwiLCBmdW5jdGlvbihlcnIsIHN0ZG91dCwgc3RkaW4pIHtcblxuICAgICAgICAgICAgICAgIGxldCBmZGlza3N0cmluZyA9IHN0ZG91dC50b1N0cmluZyhcInV0Zi04XCIpO1xuICAgICAgICAgICAgICAgIGxldCBmZGlza2xpbmVzID0gZmRpc2tzdHJpbmcuc3BsaXQoXCJcXG5cIik7XG4gICAgICAgICAgICAgICAgbGV0IGJzID0gZmRpc2tsaW5lc1syXS5yZXBsYWNlKC8gKyg/PSApL2csIFwiXCIpLnNwbGl0KFwiIFwiKVswXTtcbiAgICAgICAgICAgICAgICBsZXQgY291bnQgPSBmZGlza2xpbmVzWzJdLnJlcGxhY2UoLyArKD89ICkvZywgXCJcIikuc3BsaXQoXCIgXCIpWzBdO1xuXG4gICAgICAgICAgICAgICAgbGV0IGNtZCA9IFwiZGQgaWY9XCIgKyBzb3VyY2UgKyBcIiBicz1cIiArIGJzICsgXCIgY291bnQ9XCIgKyBjb3VudCArIFwiIG9mPVwiICsgZGVzdDtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGNtZCk7XG5cbiAgICAgICAgICAgICAgICBzaGFjaGVjayhzb3VyY2UsIGJzLCBjb3VudCkudGhlbihmdW5jdGlvbihzaGExKSB7XG5cblxuICAgICAgICAgICAgICAgICAgICBleGVjKGNtZCwgZnVuY3Rpb24oZXJyLCBzdGRvdXQsIHN0ZGVycikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFjaGVjayhkZXN0LCBicywgY291bnQpLnRoZW4oZnVuY3Rpb24oc2hhMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaGExID09IHNoYTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJzaGEgZG9uJ3QgbWF0Y2hcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9IGVsc2Uge1xuXG5cbiAgICAgICAgICAgIGxldCBjbWQgPSBcImRkIGlmPVwiICsgc291cmNlICsgXCIgb2Y9XCIgKyBkZXN0O1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjbWQpO1xuXG4gICAgICAgICAgICBzaGFjaGVjayhzb3VyY2UpLnRoZW4oZnVuY3Rpb24oc2hhMSkge1xuXG4gICAgICAgICAgICAgICAgZXhlYyhjbWQsIGZ1bmN0aW9uKGVyciwgc3Rkb3V0LCBzdGRlcnIpIHtcblxuICAgICAgICAgICAgICAgICAgICBzaGFjaGVjayhkZXN0KS50aGVuKGZ1bmN0aW9uKHNoYTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaGExID09IHNoYTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJzaGEgZG9uJ3QgbWF0Y2hcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9KTtcblxuXG5cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
